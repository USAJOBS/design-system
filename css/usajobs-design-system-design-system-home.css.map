{"version":3,"sources":["../../node_modules/uswds/src/stylesheets/lib/grid/_box-sizing.scss","design-system-home.css","../base/_accessibility.scss","../base/_utilities.scss","design-system-home.scss","../base/var/_layout.scss","../../node_modules/uswds/src/stylesheets/lib/grid/_media.scss","../base/var/_spacing.scss","../base/var/_colors.scss","../../node_modules/uswds/src/stylesheets/lib/grid/_span-columns.scss","../../node_modules/uswds/src/stylesheets/lib/grid/_private.scss","../../node_modules/uswds/src/stylesheets/lib/grid/_omega.scss","../../node_modules/uswds/src/stylesheets/lib/functions/_px-to-rem.scss","../../node_modules/uswds/src/stylesheets/lib/mixins/_clearfix.scss","../../node_modules/uswds/src/stylesheets/lib/css3/_calc.scss","../../node_modules/uswds/src/stylesheets/lib/css3/_flex-box.scss","../../node_modules/uswds/src/stylesheets/lib/addons/_prefixer.scss"],"names":[],"mappings":"AAGE,KACE,6BAAsB,CAAtB,qBCFJ,CDKE,iBAII,0BAAmB,CAAnB,kBCLN,CCFA,wBCiDE,2BAA6B,CAC7B,qBAAuB,CACvB,kBAAoB,CACpB,mBAAqB,CACrB,mBAAqB,CACrB,oBAAsB,CACtB,yBAA2B,CAC3B,4BF3CF,CGZA,gFD4UI,aFxTJ,CGZE,sEAEE,gBCRsB,CDStB,gBAAiB,CACjB,iBAAkB,CAElB,mBHgBJ,CKmDI,mCFzEF,sED4QE,iBIlRmB,CJmRnB,kBFhPF,CACF,CGrBE,8IAEE,UILiB,CJMjB,iBHyBJ,CGtBE,sEACE,gBH0BJ,CGvBE,4EACE,UAAW,CACX,iBH2BJ,CGvBA,wBACE,wBH0BF,CGxBE,iCD6KA,aAAc,CACd,QAAS,CACT,SAAU,CACV,oBFjJF,CG/BG,oCDmLC,iBAAkB,CAClB,QFhJJ,CGpCG,2CDuLG,YF/IN,CGxCG,0CD2LG,YF/IN,CG5CG,oCAIG,oBH4CN,CGvCA,kCACE,wBH0CF,CGpCA,kCD6NE,gBFrLF,CKXI,mCF7BJ,kCDgOI,iBIlRmB,CJmRnB,kBFnLF,CACF,CG5CE,wCD0JA,aAAc,CACd,QAAS,CACT,SAAU,CACV,oBAAqB,CC3JnB,UHkDJ,CGpDG,2CDgKC,iBAAkB,CAClB,QFxGJ,CGzDG,kDDoKG,YFvGN,CG7DG,iDDwKG,YFvGN,CGjEG,kFAKG,oBAAqB,CACrB,UHgEN,CK5CI,qCF1BD,kFKOC,UAAO,CAGL,aAAc,CAed,qBCtE0C,CDuE1C,eC5EyC,CN4DvC,kBHqEN,CG/EC,6FK6BK,cRqDN,CACF,CKzDI,qCF1BD,gGOLG,cV6FJ,CACF,CGpEE,+CACE,oBHuEJ,CGpEE,wCACE,uBHuEJ,CGpEE,wDACE,oBAAqB,CACrB,gBQ9E6B,CR+E7B,iBHuEJ,CGpEE,uDACE,aHuEJ,CGpEE,uDACE,aHuEJ,CGpEE,uDACE,aHuEJ,CGpEE,uDACE,aHuEJ,CGpEE,uDACE,aHuEJ,CGpEE,uDACE,aHuEJ,CGpEE,gDACE,YAAa,CACb,wBHuEJ,CGnEA,sDAKI,aHkEJ,CGvEA,4DSzGI,UAAW,CACX,UAAW,CACX,aZoLJ,CG7EA,0GAUI,kBHuEJ,CGjFA,oDU3HE,0BbiNF,CGlEI,4DACE,SHqEN,CGhEA,mDWlFI,mBAAoB,CACpB,gBAAiB,CACjB,WAAY,CAIZ,iBAAkB,CAClB,mBAAoB,CACpB,YAAa,CC1CT,uBDsMa,CCtLb,eDsLa,CClMb,2BZmH2B,CY/G3B,0BZ+G2B,CY3G3B,yBZ2G2B,CYvG3B,sBZuG2B,CW2FjC,oBdXF,CGnFA,mDYpGQ,aZ2GkB,CW+BxB,mBdoDF,CG1FA,iDYpHQ,kBZ+HW,CY/GX,UZ+GW,CY3HX,WZ2HW,CYvHX,UZuHW,CY/GX,MZ+GW,CACf,WHyFJ","file":"usajobs-design-system-design-system-home.css","sourcesContent":["@charset \"UTF-8\";\n\n@if $border-box-sizing == true {\n  html { // http://bit.ly/1qk2tVR\n    box-sizing: border-box;\n  }\n\n  * {\n    &,\n    &::after,\n    &::before {\n      box-sizing: inherit;\n    }\n  }\n}\n","html {\n  box-sizing: border-box;\n}\n\n*, *::after, *::before {\n  box-sizing: inherit;\n}\n\n.usajobs-assistive-text {\n  position: absolute !important;\n  margin: -1px !important;\n  border: 0 !important;\n  padding: 0 !important;\n  width: 1px !important;\n  height: 1px !important;\n  overflow: hidden !important;\n  clip: rect(0 0 0 0) !important;\n}\n\n.usajobs-ds-home .usajobs-permalink {\n  color: #0071bc;\n}\n\n.usajobs-ds-home .usajobs-permalink:visited {\n  color: #0071bc;\n}\n\n.usajobs-ds-home-banner__body,\n.usajobs-ds-home-banner--research__body {\n  padding: 0 1.5rem;\n  max-width: 160rem;\n  margin-left: auto;\n  margin-right: auto;\n  padding-top: 3rem;\n  padding-bottom: 3rem;\n}\n\n@media screen and (min-width: 48em) {\n  .usajobs-ds-home-banner__body,\n  .usajobs-ds-home-banner--research__body {\n    padding-left: 3rem;\n    padding-right: 3rem;\n  }\n}\n\n.usajobs-ds-home-banner__title, .usajobs-ds-home-banner__desc,\n.usajobs-ds-home-banner--research__title,\n.usajobs-ds-home-banner--research__desc {\n  color: #ffffff;\n  text-align: center;\n}\n\n.usajobs-ds-home-banner__desc,\n.usajobs-ds-home-banner--research__desc {\n  font-size: 2.4rem;\n}\n\n.usajobs-ds-home-banner__actions,\n.usajobs-ds-home-banner--research__actions {\n  width: 100%;\n  text-align: center;\n}\n\n.usajobs-ds-home-banner {\n  background-color: #205493;\n}\n\n.usajobs-ds-home-banner__actions {\n  display: block;\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n}\n\n.usajobs-ds-home-banner__actions > li {\n  display: list-item;\n  margin: 0;\n}\n\n.usajobs-ds-home-banner__actions > li:before {\n  display: none;\n}\n\n.usajobs-ds-home-banner__actions > li:after {\n  display: none;\n}\n\n.usajobs-ds-home-banner__actions li {\n  display: inline-block;\n}\n\n.usajobs-ds-home-banner--research {\n  background-color: #112e51;\n}\n\n.usajobs-ds-home-research-pillars {\n  padding: 0 1.5rem;\n}\n\n@media screen and (min-width: 48em) {\n  .usajobs-ds-home-research-pillars {\n    padding-left: 3rem;\n    padding-right: 3rem;\n  }\n}\n\n.usajobs-ds-home-research-pillars__list {\n  display: block;\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n  width: 100%;\n}\n\n.usajobs-ds-home-research-pillars__list > li {\n  display: list-item;\n  margin: 0;\n}\n\n.usajobs-ds-home-research-pillars__list > li:before {\n  display: none;\n}\n\n.usajobs-ds-home-research-pillars__list > li:after {\n  display: none;\n}\n\n.usajobs-ds-home-research-pillars__list .usajobs-ds-home-research-pillars__pillar {\n  display: inline-block;\n  width: 100%;\n}\n\n@media screen and (min-width: 37.5em) {\n  .usajobs-ds-home-research-pillars__list .usajobs-ds-home-research-pillars__pillar {\n    float: left;\n    display: block;\n    margin-right: 4.82916%;\n    width: 47.58542%;\n    min-height: 22.5rem;\n  }\n  .usajobs-ds-home-research-pillars__list .usajobs-ds-home-research-pillars__pillar:last-child {\n    margin-right: 0;\n  }\n}\n\n@media screen and (min-width: 37.5em) {\n  .usajobs-ds-home-research-pillars__list .usajobs-ds-home-research-pillars__pillar:nth-child(2n) {\n    margin-right: 0;\n  }\n}\n\n.usajobs-ds-home-research-pillars__description {\n  margin-bottom: 4.5rem;\n}\n\n.usajobs-ds-home-research-pillars__body {\n  padding: 0 1.5rem 1.5rem;\n}\n\n.usajobs-ds-home-research-pillars__icon .svg-inline--fa {\n  display: inline-block;\n  font-size: 6.8rem;\n  text-align: center;\n}\n\n.usajobs-ds-home-research-pillars__icon.p1 .fa-compass {\n  color: #981b1e;\n}\n\n.usajobs-ds-home-research-pillars__icon.p2 .fa-compass {\n  color: #02bfe7;\n}\n\n.usajobs-ds-home-research-pillars__icon.p3 .fa-compass {\n  color: #2e8540;\n}\n\n.usajobs-ds-home-research-pillars__icon.p4 .fa-compass {\n  color: #fdb81e;\n}\n\n.usajobs-ds-home-research-pillars__icon.p5 .fa-compass {\n  color: #0071bc;\n}\n\n.usajobs-ds-home-research-pillars__icon.p6 .fa-compass {\n  color: #112e51;\n}\n\n.usajobs-ds-home-research-pillars__pillar-title {\n  margin-top: 0;\n  text-transform: uppercase;\n}\n\n.no-flexbox .usajobs-ds-home-research-pillars__pillar {\n  display: table;\n}\n\n.no-flexbox .usajobs-ds-home-research-pillars__pillar::after {\n  clear: both;\n  content: \"\";\n  display: block;\n}\n\n.no-flexbox .usajobs-ds-home-research-pillars__figure, .no-flexbox .usajobs-ds-home-research-pillars__body {\n  display: table-cell;\n}\n\n.no-flexbox .usajobs-ds-home-research-pillars__body {\n  width: -webkit-calc(100% -  11.3rem);\n  width: calc(100% -  11.3rem);\n}\n\n.lt-ie9 .no-flexbox .usajobs-ds-home-research-pillars__body {\n  width: 75%;\n}\n\n.flexbox .usajobs-ds-home-research-pillars__pillar {\n  display: -webkit-box;\n  display: -moz-box;\n  display: box;\n  display: -webkit-flex;\n  display: -moz-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: start;\n  -moz-box-align: start;\n  box-align: start;\n  -webkit-align-items: flex-start;\n  -moz-align-items: flex-start;\n  -ms-align-items: flex-start;\n  -o-align-items: flex-start;\n  align-items: flex-start;\n  -ms-flex-align: start;\n}\n\n.flexbox .usajobs-ds-home-research-pillars__figure {\n  -webkit-flex-shrink: 0;\n  -moz-flex-shrink: 0;\n  flex-shrink: 0;\n  -ms-flex-negative: 0;\n}\n\n.flexbox .usajobs-ds-home-research-pillars__body {\n  -webkit-box-flex: 1;\n  -moz-box-flex: 1;\n  box-flex: 1;\n  -webkit-flex: 1;\n  -moz-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  min-width: 0;\n}\n","// Accessibility\n\n@import \"utilities\";\n\n.usajobs-assistive-text {\n  @include hide();\n}\n","// USAJOBS Utilities\n\n// Typography helpers\n@mixin header {\n  font-family: $font-sans;\n  font-weight: $font-bold;\n  line-height: $heading-line-height;\n  margin-bottom: $size-base;\n  margin-top: $size-default;\n}\n\n@mixin h1 {\n  @include header();\n  font-size: $h1-font-size;\n  color: $color-primary-darkest;\n}\n\n@mixin h2 {\n  @include header();\n  font-size: $h2-font-size;\n  color: $color-primary-darkest;\n}\n\n@mixin h3 {\n  @include header();\n  font-size: $h3-font-size;\n}\n\n@mixin h4 {\n  @include header();\n  font-size: $h4-font-size;\n}\n\n@mixin h5 {\n  @include header();\n  font-size: $h5-font-size;\n}\n\n@mixin h6 {\n  @include header();\n  font-size: $h6-font-size;\n  font-weight: $font-normal;\n  text-transform: uppercase;\n}\n\n@mixin default-text {\n  font-size: $base-font-size;\n  font-weight: $font-normal;\n  line-height: 1.5;\n  margin: $size-S 0;\n}\n\n@mixin hide() {\n  position: absolute !important;\n  margin: -1px !important;\n  border: 0 !important;\n  padding: 0 !important;\n  width: 1px !important;\n  height: 1px !important;\n  overflow: hidden !important;\n  clip: rect(0 0 0 0) !important;\n}\n\n@mixin makeCircle(\n  $size,\n  $border: none,\n  $bg-color: inherit,\n  $color: $color-white\n) {\n  display: inline-block;\n  width: $size;\n  height: $size;\n  line-height: $size;\n  border-radius: 50%;\n  color: $color;\n  background-color: $bg-color;\n  box-shadow: 0 0 0 2px $border inset;\n}\n\n@mixin makeSemiCircle($size, $bg-color: inherit, $color: $color-white) {\n  display: inline-block;\n  width: $size;\n  height: $size / 2;\n  line-height: $size;\n  -moz-border-radius: $size $size 0 0;\n  -webkit-border-radius: $size $size 0 0;\n  border-radius: $size $size 0 0;\n  color: $color;\n  background-color: $bg-color;\n}\n\n@mixin makeCloseButton($size: 35px) {\n  position: absolute;\n  top: -#{$size-default};\n  right: -#{$size-default};\n  margin: 0;\n  padding: 0;\n  @include makeCircle($size);\n  background-color: $color-gray-light;\n  text-decoration: none;\n\n  &:after {\n    position: relative;\n    display: inline-block;\n    width: rem(12px);\n    height: rem(12px);\n    background-size: 12px 12px;\n    content: url(\"../img/icons/close/times.svg\");\n    color: $color-white;\n    // Safari puts the icon slightly too low, Chrome slightly too high\n    // line-height corrects the issue in Chrome but makes it way too low in Safari\n    // line-height: $size;\n  }\n\n  &:hover {\n    background-color: $color-gray-dark;\n  }\n}\n\n@mixin makeButton(\n  $bg-color,\n  $hover-color,\n  $active-color,\n  $big: false,\n  $color: $color-white\n) {\n  display: inline-block;\n  appearance: none;\n  background-color: $bg-color;\n  border: 0;\n  color: $color;\n  cursor: pointer;\n  font-family: $font-sans;\n  font-size: $base-font-size;\n  font-weight: $font-bold;\n  line-height: 1;\n  outline: none;\n  @include margin(0.5em 0.5em 0.5em null);\n  text-align: center;\n  text-decoration: none;\n  width: 100%;\n  -webkit-font-smoothing: antialiased;\n\n  .main-content & {\n    text-decoration: none;\n  }\n\n  @if ($big) {\n    padding: $size-default $size-M;\n    border-radius: 8px;\n    font-size: 2.4rem;\n  } @else {\n    padding: 1rem 2rem;\n    border-radius: $border-radius;\n  }\n\n  @include media($SM) {\n    width: auto;\n  }\n\n  &:visited {\n    color: $color;\n  }\n\n  &:hover,\n  &.usa-button-hover {\n    background-color: $hover-color;\n    color: $color;\n    border-bottom: 0;\n    text-decoration: none;\n  }\n\n  &:active,\n  &.usa-button-active {\n    background-color: $active-color;\n  }\n\n  &:focus {\n    box-shadow: $focus-shadow;\n  }\n}\n\n@mixin makePrimaryButton() {\n  @include makeButton(\n    $color-primary,\n    $color-primary-darker,\n    $color-primary-darkest,\n    \"big\"\n  );\n}\n\n@mixin bulletList() {\n  list-style: none;\n  padding-left: 0;\n  display: table;\n\n  > li {\n    display: table-row;\n\n    &:before {\n      content: \"•\";\n      display: table-cell;\n      padding-right: 0.4em;\n    }\n\n    &:after {\n      content: \"\";\n      display: block;\n      margin-bottom: 0.5em;\n    }\n  }\n}\n\n@mixin unstyledList() {\n  display: block;\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n\n  > li {\n    display: list-item;\n    margin: 0;\n\n    &:before {\n      display: none;\n    }\n\n    &:after {\n      display: none;\n    }\n  }\n}\n\n// BACKWARD COMPATIBLE SUPPORT FOR BOOTSTRAP\n// From https://gist.github.com/johnkoht/6405117\n// Converted from sass to scss\n// Create the grid for a given size\n// This will loop over the number of columns and create a css class\n// for each. If it's the last gride size, then let's not add a float\n@mixin grid-core($size) {\n  @for $i from 1 through $grid-columns {\n    .col-#{$size}-#{$i} {\n      // Ignore float for the largest grid size\n      @if $i < $grid-columns {\n        float: left;\n      }\n      @include span-columns($i);\n    }\n    // If it's not the screen-xs, then let's add push and pull helper classes\n    @if $size != \"xs\" {\n      .col-#{$size}-push-#{$i} {\n        left: flex-grid($i, $grid-columns) + flex-gutter($grid-columns);\n      }\n      .col-#{$size}-pull-#{$i} {\n        right: flex-grid($i, $grid-columns) + flex-gutter($grid-columns);\n      }\n    }\n  }\n}\n\n// OMEGA RESET\n// From http://www.ryanscherler.com/notes/entry/omega-reset-for-bourbon-neat/\n@mixin omega-reset($nth, $context: null) {\n  @if $context == null {\n    &:nth-child(#{$nth}) {\n      margin-right: flex-gutter();\n    }\n  } @else {\n    &:nth-child(#{$nth}) {\n      margin-right: flex-gutter($context);\n    }\n  }\n  &:nth-child(#{$nth} + 1) {\n    clear: none;\n  }\n}\n\n@mixin contentGutter() {\n  padding: 0 $size-default;\n\n  @include media($ML) {\n    padding-left: $size-M;\n    padding-right: $size-M;\n  }\n}\n\n// A variation on a mixin created to reproduce Google's Material Design Card shadows\n// https://gist.github.com/paulmelnikow/7fcfbe4f68e5df7fe326\n@mixin boxShadow($level, $inset: false) {\n  @if $level == 1 {\n    @if ($inset) {\n      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12) inset,\n        0 1px 2px rgba(0, 0, 0, 0.24) inset;\n    } @else if {\n      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n    }\n  } @else if $level == 2 {\n    @if ($inset) {\n      box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16) inset,\n        0 3px 6px rgba(0, 0, 0, 0.23) inset;\n    }\n    @elseif {\n      box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n    }\n  } @else if $level == 3 {\n    @if ($inset) {\n      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19) inset,\n        0 6px 6px rgba(0, 0, 0, 0.23) inset;\n    }\n    @elseif {\n      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);\n    }\n  } @else if $level == 4 {\n    @if ($inset) {\n      box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25) inset,\n        0 10px 10px rgba(0, 0, 0, 0.22) inset;\n    }\n    @elseif {\n      box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25),\n        0 10px 10px rgba(0, 0, 0, 0.22);\n    }\n  } @else if $level == 5 {\n    @if ($inset) {\n      box-shadow: 0 19px 38px rgba(0, 0, 0, 0.3) inset,\n        0 15px 12px rgba(0, 0, 0, 0.22) inset;\n    }\n    @elseif {\n      box-shadow: 0 19px 38px rgba(0, 0, 0, 0.3),\n        0 15px 12px rgba(0, 0, 0, 0.22);\n    }\n  }\n}\n\n@mixin permaLink() {\n  color: $color-primary;\n\n  &:visited {\n    color: $color-primary;\n  }\n}\n\n// Allows us to use an HTML button and not get the default styling\n@mixin removeButton() {\n  margin: 0;\n  background-color: inherit;\n  border-radius: inherit;\n  color: $color-base;\n  font-weight: normal;\n\n  &:hover {\n    color: $color-base;\n    background-color: inherit;\n  }\n}\n\n@mixin UHPIcons($size: 31px) {\n  @include makeCircle($size, none, $color-secondary);\n  display: inline-block;\n  padding-bottom: $size-default;\n  font-size: $base-font-size;\n  text-align: center;\n  margin-right: $size-base;\n\n  &.public,\n  &.interchange {\n    @include makeCircle($size, none, $color-primary-alt);\n  }\n\n  &.federal-employees,\n  &.internal,\n  &.ses {\n    @include makeCircle($size, none, $color-primary-darkest);\n  }\n\n  &.federal-employees .fa::before {\n    margin-top: rem(-3px);\n    margin-right: rem(-2px);\n  }\n\n  &.internal .fa {\n    padding-top: rem(5px);\n\n    &::before {\n      margin-left: rem(1px);\n    }\n  }\n\n  &.veterans,\n  &.military-spouses {\n    @include makeCircle($size, none, $color-green);\n  }\n\n  // New variation with stacked circle icons\n  &.military-spouses {\n    .fa.is-first {\n      text-indent: 0;\n      top: -2px;\n      left: -4px;\n      opacity: 0.8;\n    }\n    .fa.is-second {\n      text-indent: 0;\n      left: 3px;\n    }\n  }\n\n  &.students {\n    @include makeCircle($size, none, $color-gold);\n  }\n\n  &.disability,\n  &.individuals-with-disabilities {\n    @include makeCircle($size, none, $color-primary-darker);\n  }\n\n  &.peace-corps {\n    @include makeCircle($size, none, $color-visited);\n  }\n\n  &.former-overseas-employees,\n  &.family-of-overseas-employees {\n    @include makeCircle($size, none, $color-primary-alt-darkest);\n  }\n\n  &.native-americans {\n    @include makeCircle($size, none, $color-gray);\n  }\n\n  &.land-mgmt,\n  &.land-management {\n    @include makeCircle($size, none, $color-gray-warm-dark);\n  }\n}\n\n@mixin applicationStatusColors() {\n  background-color: $color-gray-dark;\n  color: $color-white;\n  border: 1px solid $color-gray-dark;\n\n  &.status-received,\n  &.status-referred,\n  &.status-selected {\n    background-color: $color-green-dark;\n    color: $color-white;\n    border-color: $color-green-dark;\n  }\n\n  // Paused\n  &.status-incomplete,\n  &.status-in-progress {\n    background-color: $color-gold;\n    color: $color-base;\n    border-color: $color-gold;\n  }\n\n  // Stopped\n  &.status-canceled,\n  &.status-not-referred,\n  &.status-not-selected {\n    background-color: $color-secondary;\n    color: $color-white;\n    border-color: $color-secondary;\n  }\n}\n\n// Mixin to replace the use of font awesome\n@mixin icon-content($file, $height, $width, $path: null) {\n  display: inline-block;\n  background-size: $height $width;\n  height: $height;\n  width: $width;\n  @if $path == null {\n    content: url(\"../img/icons/#{$file}.svg\");\n  } @else {\n    content: url($path);\n  }\n}\n\n@mixin iconCenter($size: 1em) {\n  display: inline-flex;\n  align-self: center;\n  position: relative;\n  height: $size;\n  width: $size;\n\n  svg {\n    position: absolute;\n    left: 0;\n    right: 0;\n    margin: 0 auto;\n    height: 1em;\n    width: 1em;\n  }\n}\n","// Layouts: Design System Home\n\n@import \"../base-shared\";\n@import \"shared\";\n\n.usajobs-ds-home {\n  .usajobs-permalink {\n    @include permaLink();\n  }\n}\n\n.usajobs-ds-home-banner,\n.usajobs-ds-home-banner--research {\n  &__body {\n    @include contentGutter();\n    max-width: $site-max-width;\n    margin-left: auto;\n    margin-right: auto;\n    padding-top: $size-M;\n    padding-bottom: $size-M;\n  }\n\n  &__title,\n  &__desc {\n    color: $color-white;\n    text-align: center;\n  }\n\n  &__desc {\n    font-size: $h3-font-size;\n  }\n\n  &__actions {\n    width: 100%;\n    text-align: center;\n  }\n}\n\n.usajobs-ds-home-banner {\n  background-color: $color-primary-darker;\n\n  &__actions {\n    @include unstyledList();\n\n    li {\n      display: inline-block;\n    }\n  }\n}\n\n.usajobs-ds-home-banner--research {\n  background-color: $color-primary-darkest;\n}\n\n$pillar-icon-width: rem(68px);\n$pillar-body-padding: $size-default;\n\n.usajobs-ds-home-research-pillars {\n  @include contentGutter();\n\n  &__list {\n    @include unstyledList();\n    width: 100%;\n\n    .usajobs-ds-home-research-pillars__pillar {\n      display: inline-block;\n      width: 100%;\n\n      @include media($M) {\n        @include span-columns(3, 6);\n        min-height: rem(225px);\n      }\n\n      &:nth-child(2n) {\n        @include media($M) {\n          @include omega();\n        }\n      }\n    }\n  }\n\n  &__description {\n    margin-bottom: $size-L;\n  }\n\n  &__body {\n    padding: 0 $pillar-body-padding $pillar-body-padding;\n  }\n\n  &__icon .svg-inline--fa {\n    display: inline-block;\n    font-size: $pillar-icon-width;\n    text-align: center;\n  }\n\n  &__icon.p1 .fa-compass {\n    color: $color-secondary-darkest;\n  }\n\n  &__icon.p2 .fa-compass {\n    color: $color-primary-alt;\n  }\n\n  &__icon.p3 .fa-compass {\n    color: $color-green;\n  }\n\n  &__icon.p4 .fa-compass {\n    color: $color-gold;\n  }\n\n  &__icon.p5 .fa-compass {\n    color: $color-primary;\n  }\n\n  &__icon.p6 .fa-compass {\n    color: $color-primary-darkest;\n  }\n\n  &__pillar-title {\n    margin-top: 0;\n    text-transform: uppercase;\n  }\n}\n\n.no-flexbox .usajobs-ds-home-research-pillars {\n  $icon-padding: $size-default;\n\n  &__pillar {\n    @include clearfix();\n    display: table;\n  }\n\n  &__figure,\n  &__body {\n    display: table-cell;\n  }\n\n  &__body {\n    @include calc(\n      width,\n      \"100% - \"\n        ($pillar-icon-width + $icon-padding + ($pillar-body-padding * 2))\n    );\n\n    .lt-ie9 & {\n      width: 75%;\n    }\n  }\n}\n\n.flexbox .usajobs-ds-home-research-pillars {\n  &__pillar {\n    @include display(flex);\n    @include align-items(flex-start);\n  }\n\n  &__figure {\n    @include flex-shrink(0);\n  }\n\n  &__body {\n    @include flex(1);\n    min-width: 0;\n  }\n}\n","// Layout variables\n\n// Breakpoints\n$small-screen:       481px;\n$medium-screen:      600px;\n$large-screen:      1201px;\n\n$site-max-width:    160rem;\n$site-max-width-S:  120rem; // used by the Help Center UHP pages until we get new images\n$site-max-width-docs:  104rem;\n\n// Standards deviation\n// $site-max-width:      1040px !default;\n$lead-max-width:      77rem;\n$input-max-width:     46rem;\n$button-max-width:    30.4rem;\n$article-max-width:   60rem;\n$text-max-width:      62rem;\n// Standards deviation\n// $text-max-width:      53rem !default;\n$nav-width:           951px;\n\n$site-margins:        3rem;\n$site-margins-mobile: 1.5rem;\n$grid-margins:        3rem;\n\n// From the Standards (node_modules/uswds/src/stylesheets/core/_variables.scss)\n// Grid column counts by screen size\n$grid-columns-small: 1 !default;\n$grid-columns-medium: 6 !default;\n$grid-columns-large: 12 !default;\n\n// @media single-keyword helpers\n$small: new-breakpoint(min-width $small-screen $grid-columns-small) !default;\n$medium: new-breakpoint(min-width $medium-screen $grid-columns-medium) !default;\n$large: new-breakpoint(min-width $large-screen $grid-columns-large) !default;\n","@charset \"UTF-8\";\n\n/// Outputs a media-query block with an optional grid context (the total number of columns used in the grid).\n///\n/// @param {List} $query\n///   A list of media query features and values, where each `$feature` should have a corresponding `$value`.\n///   For a list of valid values for `$feature`, click [here](http://www.w3.org/TR/css3-mediaqueries/#media1).\n///\n///   If there is only a single `$value` in `$query`, `$default-feature` is going to be used.\n///\n///   The number of total columns in the grid can be set by passing `$columns` at the end of the list (overrides `$total-columns`).\n///\n///\n/// @param {Number (unitless)} $total-columns [$grid-columns]\n///   - Number of columns to use in the new grid context. Can be set as a shorthand in the first parameter.\n///\n/// @example scss - Usage\n///   .responsive-element {\n///      @include media(769px) {\n///        @include span-columns(6);\n///      }\n///   }\n///\n///  .new-context-element {\n///    @include media(min-width 320px max-width 480px, 6) {\n///      @include span-columns(6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///  @media screen and (min-width: 769px) {\n///    .responsive-element {\n///      display: block;\n///      float: left;\n///      margin-right: 2.35765%;\n///      width: 48.82117%;\n///    }\n///\n///    .responsive-element:last-child {\n///      margin-right: 0;\n///    }\n///  }\n///\n///  @media screen and (min-width: 320px) and (max-width: 480px) {\n///    .new-context-element {\n///      display: block;\n///      float: left;\n///      margin-right: 4.82916%;\n///      width: 100%;\n///    }\n///\n///    .new-context-element:last-child {\n///      margin-right: 0;\n///    }\n///  }\n\n@mixin media($query: $feature $value $columns, $total-columns: $grid-columns) {\n  @if length($query) == 1 {\n    @media screen and ($default-feature: nth($query, 1)) {\n      $default-grid-columns: $grid-columns;\n      $grid-columns: $total-columns !global;\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  } @else {\n    $loop-to: length($query);\n    $media-query: \"screen and \";\n    $default-grid-columns: $grid-columns;\n    $grid-columns: $total-columns !global;\n\n    @if is-not(is-even(length($query))) {\n      $grid-columns: nth($query, $loop-to) !global;\n      $loop-to: $loop-to - 1;\n    }\n\n    $i: 1;\n    @while $i <= $loop-to {\n      $media-query: $media-query + \"(\" + nth($query, $i) + \": \" + nth($query, $i + 1) + \") \";\n\n      @if ($i + 1) != $loop-to {\n        $media-query: $media-query + \"and \";\n      }\n\n      $i: $i + 2;\n    }\n\n    @media #{$media-query} {\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  }\n}\n","// Spacing\n\n$size-XS: 0.25rem; // 2.5px\n$size-base: 0.5rem; // 5px\n$size-S: $size-base * 2; // 10px\n$size-default: $size-base * 3; // 15px\n$size-SM: $size-base * 4; // 20px - Use this sparingly\n$size-M: $size-base * 6; // 30px\n$size-L: $size-base * 9; // 45px\n$size-XL: $size-M * 2; // 60px\n$size-XXL: $size-default * 5; // 75px\n$size-XXXL: $size-default * 6; // 100px\n\n$space-inset-default: $size-default $size-default $size-default $size-default;\n$space-inset-XS: $size-XS $size-XS $size-XS $size-XS;\n$space-inset-base: $size-base $size-base $size-base $size-base;\n$space-inset-M: $size-M $size-M $size-M $size-M;\n$space-inset-L: $size-L $size-L $size-L $size-L;\n\n$space-stack-default: 0 0 $size-default 0;\n$space-stack-XS: 0 0 $size-XS 0;\n$space-stack-S: 0 0 $size-S 0;\n$space-stack-M: 0 0 $size-M 0;\n$space-stack-L: 0 0 $size-L 0;\n$space-stack-XL: 0 0 $size-XL 0;\n$space-stack-XXL: 0 0 $size-XXL 0;\n","// Colors\n\n// USWDS colors\n$color-primary: #0071bc;\n$color-primary-darker: #205493;\n$color-primary-darkest: #112e51;\n\n$color-primary-alt: #02bfe7;\n$color-primary-alt-dark: #00a6d2;\n$color-primary-alt-darkest: #046b99;\n$color-primary-alt-light: #9bdaf1; // lighten($color-primary-alt, 60%)\n$color-primary-alt-lightest: #e1f3f8; // lighten($color-primary-alt, 90%)\n\n$color-secondary: #e31c3d;\n$color-secondary-dark: #cd2026;\n$color-secondary-darkest: #981b1e;\n$color-secondary-light: #e59393; // lighten($color-secondary, 60%)\n$color-secondary-lightest: #f9dede; // lighten($color-secondary, 90%)\n\n$color-white: #ffffff;\n$color-base: #212121;\n$color-black: #000000;\n\n$color-gray-dark: #323a45;\n$color-gray: #5b616b; // lighten($color-gray-dark, 20%)\n$color-gray-medium: #757575; // lightest gray that passes color contrast\n$color-gray-light: #aeb0b5; // lighten($color-gray-dark, 60%)\n$color-gray-lighter: #d6d7d9; // lighten($color-gray-dark, 80%)\n$color-gray-lightest: #f1f1f1; // lighten($color-gray-dark, 91%)\n\n$color-gray-warm-dark: #494440;\n$color-gray-warm-light: #e4e2e0; // lighten($color-gray-warm-dark, 90%)\n$color-gray-cool-light: #dce4ef; // lighten($color-primary, 90%)\n\n$color-gold: #fdb81e;\n$color-gold-light: #f9c642; //  lighten($color-gold, 20%)\n$color-gold-lighter: #fad980; //  lighten($color-gold, 60%)\n$color-gold-lightest: #fff1d2; //  lighten($color-gold, 83%)\n\n$color-green: #2e8540;\n$color-green-light: #4aa564; // lighten($color-green, 20%)\n$color-green-lighter: #94bfa2; // lighten($color-green, 60%)\n$color-green-lightest: #e7f4e4; // lighten($color-green, 60%)\n\n$color-cool-blue: #205493;\n$color-cool-blue-light: #4773aa; // lighten($color-cool-blue, 20%)\n$color-cool-blue-lighter: #8ba6ca; // lighten($color-cool-blue, 60%)\n$color-cool-blue-lightest: #dce4ef; // lighten($color-cool-blue, 90%)\n\n$color-focus: #3e94cf;\n$color-visited: #4c2c92;\n\n$color-shadow: rgba(#000, 0.3);\n\n// USAJOBS specific\n$color-green-dark: #2d8700;\n$color-green-darker: darken($color-green-dark, 10%);\n\n// Only used for the active state of the alert/destructive button\n// See https://github.com/USAJOBS/design-system/issues/1\n$color-red-darkest: #7b0608;\n","@charset \"UTF-8\";\n\n/// Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.\n///\n/// @param {List} $span\n///   A list containing `$columns`, the unitless number of columns the element spans (required), and `$container-columns`, the number of columns the parent element spans (optional).\n///\n///   If only one value is passed, it is assumed that it's `$columns` and that that `$container-columns` is equal to `$grid-columns`, the total number of columns in the grid.\n///\n///   The values can be separated with any string such as `of`, `/`, etc.\n///\n///   `$columns` also accepts decimals for when it's necessary to break out of the standard grid. E.g. Passing `2.4` in a standard 12 column grid will divide the row into 5 columns.\n///\n/// @param {String} $display [block]\n///   Sets the display property of the element. By default it sets the display property of the element to `block`.\n///\n///   If passed `block-collapse`, it also removes the margin gutter by adding it to the element width.\n///\n///   If passed `table`, it sets the display property to `table-cell` and calculates the width of the element without taking gutters into consideration. The result does not align with the block-based grid.\n///\n/// @example scss - Usage\n///   .element {\n///     @include span-columns(6);\n///\n///    .nested-element {\n///      @include span-columns(2 of 6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///   .element {\n///     display: block;\n///     float: left;\n///     margin-right: 2.35765%;\n///     width: 48.82117%;\n///   }\n///\n///   .element:last-child {\n///     margin-right: 0;\n///   }\n///\n///   .element .nested-element {\n///     display: block;\n///     float: left;\n///     margin-right: 4.82916%;\n///     width: 30.11389%;\n///   }\n///\n///   .element .nested-element:last-child {\n///     margin-right: 0;\n///   }\n\n@mixin span-columns($span: $columns of $container-columns, $display: block) {\n  $columns: nth($span, 1);\n  $container-columns: container-span($span);\n\n  $parent-columns: get-parent-columns($container-columns) !global;\n\n  $direction: get-direction($layout-direction, $default-layout-direction);\n  $opposite-direction: get-opposite-direction($direction);\n\n  $display-table: is-display-table($container-display-table, $display);\n\n  @if $display-table  {\n    display: table-cell;\n    width: percentage($columns / $container-columns);\n  } @else {\n    float: #{$opposite-direction};\n\n    @if $display != no-display {\n      display: block;\n    }\n\n    @if $display == collapse {\n      @include -neat-warn(\"The 'collapse' argument will be deprecated. Use 'block-collapse' instead.\");\n    }\n\n    @if $display == collapse or $display == block-collapse {\n      width: flex-grid($columns, $container-columns) + flex-gutter($container-columns);\n\n      &:last-child {\n        width: flex-grid($columns, $container-columns);\n      }\n\n    } @else {\n      margin-#{$direction}: flex-gutter($container-columns);\n      width: flex-grid($columns, $container-columns);\n\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n  }\n}\n","$parent-columns: $grid-columns !default;\n$fg-column: $column;\n$fg-gutter: $gutter;\n$fg-max-columns: $grid-columns;\n$container-display-table: false !default;\n$layout-direction: LTR !default;\n\n@function flex-grid($columns, $container-columns: $fg-max-columns) {\n  $width: $columns * $fg-column + ($columns - 1) * $fg-gutter;\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($width / $container-width);\n}\n\n@function flex-gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter) {\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($gutter / $container-width);\n}\n\n@function grid-width($n) {\n  @return $n * $gw-column + ($n - 1) * $gw-gutter;\n}\n\n@function get-parent-columns($columns) {\n  @if $columns != $grid-columns {\n    $parent-columns: $columns !global;\n  } @else {\n    $parent-columns: $grid-columns !global;\n  }\n\n  @return $parent-columns;\n}\n\n@function is-display-table($container-is-display-table, $display) {\n  @return $container-is-display-table == true or $display == table;\n}\n","@charset \"UTF-8\";\n\n/// Removes the element's gutter margin, regardless of its position in the grid hierarchy or display property. It can target a specific element, or every `nth-child` occurrence. Works only with `block` layouts.\n///\n/// @param {List} $query [block]\n///   List of arguments. Supported arguments are `nth-child` selectors (targets a specific pseudo element) and `auto` (targets `last-child`).\n///\n///   When passed an `nth-child` argument of type `*n` with `block` display, the omega mixin automatically adds a clear to the `*n+1` th element. Note that composite arguments such as `2n+1` do not support this feature.\n///\n///   **Deprecation warning**: The omega mixin will no longer take a `$direction` argument. To change the layout direction, use `row($direction)` or set `$default-layout-direction` instead.\n///\n/// @example scss - Usage\n///   .element {\n///     @include omega;\n///   }\n///\n///   .nth-element {\n///     @include omega(4n);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     margin-right: 0;\n///   }\n///\n///   .nth-element:nth-child(4n) {\n///     margin-right: 0;\n///   }\n///\n///   .nth-element:nth-child(4n+1) {\n///     clear: left;\n///   }\n\n@mixin omega($query: block, $direction: default) {\n  $table: belongs-to(table, $query);\n  $auto: belongs-to(auto, $query);\n\n  @if $direction != default {\n    @include -neat-warn(\"The omega mixin will no longer take a $direction argument. To change the layout direction, use the direction(){...} mixin.\");\n  } @else {\n    $direction: get-direction($layout-direction, $default-layout-direction);\n  }\n\n  @if $table {\n    @include -neat-warn(\"The omega mixin no longer removes padding in table layouts.\");\n  }\n\n  @if length($query) == 1 {\n    @if $auto {\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n\n    @else if contains-display-value($query) and $table == false {\n      margin-#{$direction}: 0;\n    }\n\n    @else {\n      @include nth-child($query, $direction);\n    }\n  } @else if length($query) == 2 {\n    @if $auto {\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    } @else {\n      @include nth-child(nth($query, 1), $direction);\n    }\n  } @else {\n    @include -neat-warn(\"Too many arguments passed to the omega() mixin.\");\n  }\n}\n\n@mixin nth-child($query, $direction) {\n  $opposite-direction: get-opposite-direction($direction);\n\n  &:nth-child(#{$query}) {\n    margin-#{$direction}: 0;\n  }\n\n  @if type-of($query) == number and unit($query) == \"n\" {\n    &:nth-child(#{$query}+1) {\n      clear: $opposite-direction;\n    }\n  }\n}\n","// Convert pixels to rems\n// eg. for a relational value of 12px write rem(12)\n// Assumes $em-base is the font-size of <html>\n\n@function rem($pxval) {\n  @if not unitless($pxval) {\n    $pxval: strip-units($pxval);\n  }\n\n  $base: $em-base;\n  @if not unitless($base) {\n    $base: strip-units($base);\n  }\n  @return ($pxval / $base) * 1rem;\n}\n","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link http://goo.gl/yP5hiZ\n///\n/// @example scss\n///   .element {\n///     @include clearfix;\n///   }\n///\n/// @example css\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: block;\n///   }\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: block;\n  }\n}\n","@mixin calc($property, $value) {\n  #{$property}: -webkit-calc(#{$value});\n  #{$property}: calc(#{$value});\n}\n","// CSS3 Flexible Box Model and property defaults\n\n// Custom shorthand notation for flexbox\n@mixin box($orient: inline-axis, $pack: start, $align: stretch) {\n  @include display-box;\n  @include box-orient($orient);\n  @include box-pack($pack);\n  @include box-align($align);\n}\n\n@mixin display-box {\n  display: -webkit-box;\n  display: -moz-box;\n  display: -ms-flexbox; // IE 10\n  display: box;\n}\n\n@mixin box-orient($orient: inline-axis) {\n// horizontal|vertical|inline-axis|block-axis|inherit\n  @include prefixer(box-orient, $orient, webkit moz spec);\n}\n\n@mixin box-pack($pack: start) {\n// start|end|center|justify\n  @include prefixer(box-pack, $pack, webkit moz spec);\n  -ms-flex-pack: $pack; // IE 10\n}\n\n@mixin box-align($align: stretch) {\n// start|end|center|baseline|stretch\n  @include prefixer(box-align, $align, webkit moz spec);\n  -ms-flex-align: $align; // IE 10\n}\n\n@mixin box-direction($direction: normal) {\n// normal|reverse|inherit\n  @include prefixer(box-direction, $direction, webkit moz spec);\n  -ms-flex-direction: $direction; // IE 10\n}\n\n@mixin box-lines($lines: single) {\n// single|multiple\n  @include prefixer(box-lines, $lines, webkit moz spec);\n}\n\n@mixin box-ordinal-group($int: 1) {\n  @include prefixer(box-ordinal-group, $int, webkit moz spec);\n  -ms-flex-order: $int; // IE 10\n}\n\n@mixin box-flex($value: 0) {\n  @include prefixer(box-flex, $value, webkit moz spec);\n  -ms-flex: $value; // IE 10\n}\n\n@mixin box-flex-group($int: 1) {\n  @include prefixer(box-flex-group, $int, webkit moz spec);\n}\n\n// CSS3 Flexible Box Model and property defaults\n// Unified attributes for 2009, 2011, and 2012 flavours.\n\n// 2009 - display (box | inline-box)\n// 2011 - display (flexbox | inline-flexbox)\n// 2012 - display (flex | inline-flex)\n@mixin display($value) {\n// flex | inline-flex\n  @if $value == \"flex\" {\n    // 2009\n    display: -webkit-box;\n    display: -moz-box;\n    display: box;\n\n    // 2012\n    display: -webkit-flex;\n    display: -moz-flex;\n    display: -ms-flexbox; // 2011 (IE 10)\n    display: flex;\n  } @else if $value == \"inline-flex\" {\n    display: -webkit-inline-box;\n    display: -moz-inline-box;\n    display: inline-box;\n\n    display: -webkit-inline-flex;\n    display: -moz-inline-flex;\n    display: -ms-inline-flexbox;\n    display: inline-flex;\n  } @else {\n    display: $value;\n  }\n}\n\n// 2009 - box-flex (integer)\n// 2011 - flex (decimal | width decimal)\n// 2012 - flex (integer integer width)\n@mixin flex($value) {\n\n  // Grab flex-grow for older browsers.\n  $flex-grow: nth($value, 1);\n\n  // 2009\n  @include prefixer(box-flex, $flex-grow, webkit moz spec);\n\n  // 2011 (IE 10), 2012\n  @include prefixer(flex, $value, webkit moz ms spec);\n}\n\n// 2009 - box-orient ( horizontal | vertical | inline-axis | block-axis)\n//      - box-direction (normal | reverse)\n// 2011 - flex-direction (row | row-reverse | column | column-reverse)\n// 2012 - flex-direction (row | row-reverse | column | column-reverse)\n@mixin flex-direction($value: row) {\n\n  // Alt values.\n  $value-2009: $value;\n  $value-2011: $value;\n  $direction: normal;\n\n  @if $value == row {\n    $value-2009: horizontal;\n  } @else if $value == \"row-reverse\" {\n    $value-2009: horizontal;\n    $direction: reverse;\n  } @else if $value == column {\n    $value-2009: vertical;\n  } @else if $value == \"column-reverse\" {\n    $value-2009: vertical;\n    $direction: reverse;\n  }\n\n  // 2009\n  @include prefixer(box-orient, $value-2009, webkit moz spec);\n  @include prefixer(box-direction, $direction, webkit moz spec);\n\n  // 2012\n  @include prefixer(flex-direction, $value, webkit moz spec);\n\n  // 2011 (IE 10)\n  -ms-flex-direction: $value;\n}\n\n// 2009 - box-lines (single | multiple)\n// 2011 - flex-wrap (nowrap | wrap | wrap-reverse)\n// 2012 - flex-wrap (nowrap | wrap | wrap-reverse)\n@mixin flex-wrap($value: nowrap) {\n  // Alt values\n  $alt-value: $value;\n  @if $value == nowrap {\n    $alt-value: single;\n  } @else if $value == wrap {\n    $alt-value: multiple;\n  } @else if $value == \"wrap-reverse\" {\n    $alt-value: multiple;\n  }\n\n  @include prefixer(box-lines, $alt-value, webkit moz spec);\n  @include prefixer(flex-wrap, $value, webkit moz ms spec);\n}\n\n// 2009 - TODO: parse values into flex-direction/flex-wrap\n// 2011 - TODO: parse values into flex-direction/flex-wrap\n// 2012 - flex-flow (flex-direction || flex-wrap)\n@mixin flex-flow($value) {\n  @include prefixer(flex-flow, $value, webkit moz spec);\n}\n\n// 2009 - box-ordinal-group (integer)\n// 2011 - flex-order (integer)\n// 2012 - order (integer)\n@mixin order($int: 0) {\n  // 2009\n  @include prefixer(box-ordinal-group, $int, webkit moz spec);\n\n  // 2012\n  @include prefixer(order, $int, webkit moz spec);\n\n  // 2011 (IE 10)\n  -ms-flex-order: $int;\n}\n\n// 2012 - flex-grow (number)\n@mixin flex-grow($number: 0) {\n  @include prefixer(flex-grow, $number, webkit moz spec);\n  -ms-flex-positive: $number;\n}\n\n// 2012 - flex-shrink (number)\n@mixin flex-shrink($number: 1) {\n  @include prefixer(flex-shrink, $number, webkit moz spec);\n  -ms-flex-negative: $number;\n}\n\n// 2012 - flex-basis (number)\n@mixin flex-basis($width: auto) {\n  @include prefixer(flex-basis, $width, webkit moz spec);\n  -ms-flex-preferred-size: $width;\n}\n\n// 2009 - box-pack (start | end | center | justify)\n// 2011 - flex-pack (start | end | center | justify)\n// 2012 - justify-content (flex-start | flex-end | center | space-between | space-around)\n@mixin justify-content($value: flex-start) {\n\n  // Alt values.\n  $alt-value: $value;\n  @if $value == \"flex-start\" {\n    $alt-value: start;\n  } @else if $value == \"flex-end\" {\n    $alt-value: end;\n  } @else if $value == \"space-between\" {\n    $alt-value: justify;\n  } @else if $value == \"space-around\" {\n    $alt-value: distribute;\n  }\n\n  // 2009\n  @include prefixer(box-pack, $alt-value, webkit moz spec);\n\n  // 2012\n  @include prefixer(justify-content, $value, webkit moz ms o spec);\n\n  // 2011 (IE 10)\n  -ms-flex-pack: $alt-value;\n}\n\n// 2009 - box-align (start | end | center | baseline | stretch)\n// 2011 - flex-align (start | end | center | baseline | stretch)\n// 2012 - align-items (flex-start | flex-end | center | baseline | stretch)\n@mixin align-items($value: stretch) {\n\n  $alt-value: $value;\n\n  @if $value == \"flex-start\" {\n    $alt-value: start;\n  } @else if $value == \"flex-end\" {\n    $alt-value: end;\n  }\n\n  // 2009\n  @include prefixer(box-align, $alt-value, webkit moz spec);\n\n  // 2012\n  @include prefixer(align-items, $value, webkit moz ms o spec);\n\n  // 2011 (IE 10)\n  -ms-flex-align: $alt-value;\n}\n\n// 2011 - flex-item-align (auto | start | end | center | baseline | stretch)\n// 2012 - align-self (auto | flex-start | flex-end | center | baseline | stretch)\n@mixin align-self($value: auto) {\n\n  $value-2011: $value;\n  @if $value == \"flex-start\" {\n    $value-2011: start;\n  } @else if $value == \"flex-end\" {\n    $value-2011: end;\n  }\n\n  // 2012\n  @include prefixer(align-self, $value, webkit moz spec);\n\n  // 2011 (IE 10)\n  -ms-flex-item-align: $value-2011;\n}\n\n// 2011 - flex-line-pack (start | end | center | justify | distribute | stretch)\n// 2012 - align-content (flex-start | flex-end | center | space-between | space-around | stretch)\n@mixin align-content($value: stretch) {\n\n  $value-2011: $value;\n  @if $value == \"flex-start\" {\n    $value-2011: start;\n  } @else if $value == \"flex-end\" {\n    $value-2011: end;\n  } @else if $value == \"space-between\" {\n    $value-2011: justify;\n  } @else if $value == \"space-around\" {\n    $value-2011: distribute;\n  }\n\n  // 2012\n  @include prefixer(align-content, $value, webkit moz spec);\n\n  // 2011 (IE 10)\n  -ms-flex-line-pack: $value-2011;\n}\n","@charset \"UTF-8\";\n\n/// A mixin for generating vendor prefixes on non-standardized properties.\n///\n/// @param {String} $property\n///   Property to prefix\n///\n/// @param {*} $value\n///   Value to use\n///\n/// @param {List} $prefixes\n///   Prefixes to define\n///\n/// @example scss - Usage\n///   .element {\n///     @include prefixer(border-radius, 10px, webkit ms spec);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     -webkit-border-radius: 10px;\n///     -moz-border-radius: 10px;\n///     border-radius: 10px;\n///   }\n///\n/// @require {variable} $prefix-for-webkit\n/// @require {variable} $prefix-for-mozilla\n/// @require {variable} $prefix-for-microsoft\n/// @require {variable} $prefix-for-opera\n/// @require {variable} $prefix-for-spec\n\n@mixin prefixer($property, $value, $prefixes) {\n  @each $prefix in $prefixes {\n    @if $prefix == webkit {\n      @if $prefix-for-webkit {\n        -webkit-#{$property}: $value;\n      }\n    } @else if $prefix == moz {\n      @if $prefix-for-mozilla {\n        -moz-#{$property}: $value;\n      }\n    } @else if $prefix == ms {\n      @if $prefix-for-microsoft {\n        -ms-#{$property}: $value;\n      }\n    } @else if $prefix == o {\n      @if $prefix-for-opera {\n        -o-#{$property}: $value;\n      }\n    } @else if $prefix == spec {\n      @if $prefix-for-spec {\n        #{$property}: $value;\n      }\n    } @else  {\n      @warn \"Unrecognized prefix: #{$prefix}\";\n    }\n  }\n}\n\n@mixin disable-prefix-for-all() {\n  $prefix-for-webkit:    false !global;\n  $prefix-for-mozilla:   false !global;\n  $prefix-for-microsoft: false !global;\n  $prefix-for-opera:     false !global;\n  $prefix-for-spec:      false !global;\n}\n"]}